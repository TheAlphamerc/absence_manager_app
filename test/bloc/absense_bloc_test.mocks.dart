// Mocks generated by Mockito 5.4.5 from annotations
// in absence_manager_app/test/bloc/absense_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:absence_manager_app/feature/home/bloc/absence_bloc.dart' as _i6;
import 'package:absence_manager_app/feature/home/entity/entity.dart' as _i5;
import 'package:absence_manager_app/feature/home/repository/absence_repository.dart'
    as _i3;
import 'package:api/api.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApi_0 extends _i1.SmartFake implements _i2.Api {
  _FakeApi_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AbsenceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsenceRepository extends _i1.Mock implements _i3.AbsenceRepository {
  @override
  _i2.Api get api =>
      (super.noSuchMethod(
            Invocation.getter(#api),
            returnValue: _FakeApi_0(this, Invocation.getter(#api)),
            returnValueForMissingStub: _FakeApi_0(
              this,
              Invocation.getter(#api),
            ),
          )
          as _i2.Api);

  @override
  set api(_i2.Api? _api) => super.noSuchMethod(
    Invocation.setter(#api, _api),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<List<_i5.Absence>> getAbsences({
    int? page = 1,
    int? perPage = 10,
    _i6.FilterBy? filterBy,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAbsences, [], {
              #page: page,
              #perPage: perPage,
              #filterBy: filterBy,
            }),
            returnValue: _i4.Future<List<_i5.Absence>>.value(<_i5.Absence>[]),
            returnValueForMissingStub: _i4.Future<List<_i5.Absence>>.value(
              <_i5.Absence>[],
            ),
          )
          as _i4.Future<List<_i5.Absence>>);

  @override
  _i4.Future<int> getTotalAbsences({
    String? typeFilter,
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTotalAbsences, [], {
              #typeFilter: typeFilter,
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i4.Future<int>.value(0),
            returnValueForMissingStub: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}
